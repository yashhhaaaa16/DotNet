https://zjnu2017.github.io/OOAD/reading/Object.Oriented.Analysis.and.Design.with.Applications.3rd.Edition.by.Booch.pdf

4-Pillars of OOP

1) Abstraction - 
2) Encapsulation - 
	Class [Template] - Abstract, Conret Class, Final/Sealed, Partial, Static, Anonymous
	Access modifers [Public, Private, Protected, Internal, Protected Internal]

3) Inheritance - [Reusability]
	Generlization - To - Specialization
	[Abstract Class => Concret Class => Sealed/Final Class]
	Types - Single, Multiple [Not Supported - For classes], Multilevel, Hybrid, Hierarchical 

4) Polymorphism - 
	Compile Time, Static Binding, Overloading, Early Binding
	Runtime, Dynamic Binding, Overriding, Late Binding

Constructors - 	Initialization [Overloading is possible]
	1) Default/Parameterless 
	2) Parameterized 
	3) Copy
	4) Static

class Customer{
	static Customer(){Static}
	public Customer(){Default}
	public Customer(int customerId,string contactName){Parameterized}
	public Customer(int pincode,string state, string country){Parameterized}
	public Customer(Customer customer){Copy}
}

class BasicMath{
	int Addtion(int i){...}
	int Addtion(double i,double j){...}
	int Addtion(int i,int j){...}
	double Addtion(double i,double j,double k){...}
}

class AdvanceMath:BasicMath{
	string Addtion(string fname,string lname){...}
}

class GeneralMessage{

	public virtual string Message(){
		return "Simple Message!";
	}
}
class HrMessage:GeneralMessage{
	public override string Message(){
		return "Hr Message!";
	}
}

GeneralMessage message=new HrMessage();
message.Message();

Shadowing 

class GeneralMessage{

	public string Message(){
		return "Simple Message!";
	}
}
class HrMessage:GeneralMessage{
	public new string Message(){
		return "Hr Message!";
	}
}

GeneralMessage message=new GeneralMessage();
message.Message();"Simple Message!"
GeneralMessage message=new HrMessage();
message.Message();//"Simple Message!"

HrMessage message=new HrMessage();
message.Message(); //"Hr Message!"


SOA - Service Oritented Archietecture [Web Service]

interface IPrimeMember{
	int PrimeMember();
}
interface IErosMember{
	int ErosMember();
}
interface ILoinsGateMember{
	int LoinsGateMember();
}
interface IPrimeEros:IPrimeMember,IErosMember{
	
}
class AmazonService:IPrimeMember,IErosMember,ILoinsGateMember{

	public int PrimeMember(){...}
	public int EorsMember(){...}
	public int LionsGateMember(){...}
}

IPrimeMember primeObj = new AmazonService();
primeObj.
IPrimeEros primeErosObj = new AmazonService();
primeObj.
